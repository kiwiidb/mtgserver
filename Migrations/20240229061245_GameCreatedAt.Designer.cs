// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MtgServer.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20240229061245_GameCreatedAt")]
    partial class GameCreatedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Commander")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Deck2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Deck3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Deck4Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Player2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Player3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Player4Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WinningDeckId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Deck2Id");

                    b.HasIndex("Deck3Id");

                    b.HasIndex("Deck4Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("Player3Id");

                    b.HasIndex("Player4Id");

                    b.HasIndex("WinnerId");

                    b.HasIndex("WinningDeckId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Deck", b =>
                {
                    b.HasOne("Player", null)
                        .WithMany("Decks")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.HasOne("Deck", "Deck2")
                        .WithMany()
                        .HasForeignKey("Deck2Id");

                    b.HasOne("Deck", "Deck3")
                        .WithMany()
                        .HasForeignKey("Deck3Id");

                    b.HasOne("Deck", "Deck4")
                        .WithMany()
                        .HasForeignKey("Deck4Id");

                    b.HasOne("Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");

                    b.HasOne("Player", "Player3")
                        .WithMany()
                        .HasForeignKey("Player3Id");

                    b.HasOne("Player", "Player4")
                        .WithMany()
                        .HasForeignKey("Player4Id");

                    b.HasOne("Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.HasOne("Deck", "WinningDeck")
                        .WithMany()
                        .HasForeignKey("WinningDeckId");

                    b.Navigation("Deck2");

                    b.Navigation("Deck3");

                    b.Navigation("Deck4");

                    b.Navigation("Player2");

                    b.Navigation("Player3");

                    b.Navigation("Player4");

                    b.Navigation("Winner");

                    b.Navigation("WinningDeck");
                });

            modelBuilder.Entity("Player", b =>
                {
                    b.Navigation("Decks");
                });
#pragma warning restore 612, 618
        }
    }
}
